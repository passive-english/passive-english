#!/usr/bin/env ruby

require "fileutils"
require "timeout"
require "csv"
require("byebug") if RUBY_PLATFORM.include?("darwin")
require "shellwords"
require 'open-uri'

class AutoUpdater
  BROADCAST_VERSION = 100
  AUTO_UPDATE_INTERVAL = RUBY_PLATFORM.include?("darwin") ? 3 : 300
  URL = "https://raw.githubusercontent.com/passive-english/passive-english/main/broadcast-daily"

  def perform_in_loop
    puts "AUTOUPDATER running in file #{__FILE__}"
    if current_filename == new_version_filename
      finish_update
    else
      loop do
        perform
        sleep AUTO_UPDATE_INTERVAL
      end
    end
  end

  def current_filename
    File.expand_path(__FILE__)
  end

  def perform
    if new_version_available?
      puts "NEW VERSION AVAILABLE. UPDATE!"
      initiate_update
    else
      puts "SAME VERSION"
    end
  end

  def initiate_update
    download_new_version
    start_new_version
  end

  def new_version_available?
    line = URI.open(URL).each_line.detect { |line| line.include?("BROADCAST_VERSION") }
    return false if line.nil?
    version = line.split(" = ").last.to_i
    version > BROADCAST_VERSION
  rescue => e
    p e
    false
  end

  def download_new_version
    system "wget -O #{new_version_filename} #{URL}"
  end

  def new_version_filename
    File.expand_path("./new-broadcast-daily", __dir__)
  end

  def current_version_filename
    File.expand_path("./bin-broadcast-daily", __dir__)
  end

  def start_new_version
    pid = fork do
      exec(new_version_filename)
    end

    Process.detach(pid)
    exit 10
  end

  def start_current_version
    pid = fork do
      exec(current_version_filename)
    end

    Process.detach(pid)
    exit 11
  end

  def finish_update
    sleep 10
    system "cp #{Shellwords.escape(new_version_filename)} #{Shellwords.escape(current_version_filename)}"
    start_current_version
  end
end

class AudioPlayer
  attr_reader :url

  def initialize(url)
    @url = url
  end

  def perform
    puts "Playing #{url}"
    download_audio unless audio_downloaded?
    play_audio
  end

  def play_audio
    puts "playing #{audio_filename}"
    if mac?
      system "afplay #{Shellwords.escape(audio_filename)}"
    else
      system "play #{Shellwords.escape(audio_filename)}"
    end
  end

  def mac?
    RUBY_PLATFORM.include?("darwin")
  end

  def cached_folder
    File.expand_path("./today/audio", __dir__).tap do |path|
      FileUtils.mkdir_p(path)
    end
  end

  def audio_filename
    File.expand_path(File.basename(url), cached_folder)
  end

  def randomized_tmp_filename
    File.expand_path("./rnd-#{rand(10000)}.tmp", cached_folder)
  end

  def download_audio
    tmp_filename = randomized_tmp_filename
    puts "Downloading audio to #{tmp_filename}..."
    cmd = "wget '#{url}' -O '#{tmp_filename}'"
    puts "=" * 80
    puts cmd
    puts "=" * 80
    if system(cmd)
      FileUtils.mv(tmp_filename, audio_filename)
    else
      puts "Download failed"
    end
  end

  def audio_downloaded?
    File.exists?(audio_filename)
  end
end

class MasterPlayer
  attr_reader :started_at

  def initialize
    @started_at = Time.now.to_i
    Thread.new { AutoUpdater.new.perform_in_loop }
  end

  def should_I_die?
    started_at < should_die_at
  end

  def should_die_at_signal_filename
    File.expand_path("~/.broadcast-daily.die-at.signal")
  end

  def should_die_at
    if File.exists?(should_die_at_signal_filename)
      File.read(should_die_at_signal_filename).to_i
    else
      0
    end
  end

  def kill_all
    File.write(should_die_at_signal_filename, Time.now.to_i)
  end

  def loop_until_killed
    until should_I_die? do
      yield
    end
  end

  def perform_in_loop
    loop_until_killed do
      if in_the_right_moment?
        perform
        sleep 3
      else
        puts "WAITING FOR RIGHT MOMENT"
        sleep long_sleep_time
      end
    end
  end

  def long_sleep_time
    mac? ? 5 : 60
  end

  def mac?
    RUBY_PLATFORM.include?("darwin")
  end

  def perform_in_blind_loop
    loop_until_killed do
      perform
      sleep 3
    end
  end

  def examine
    loop_until_killed do
      perform
      rotate_today
    end
  end

  RIGHT_MOMENT_STARTED_AT = 6 * 60 + 30
  RIGHT_MOMENT_ENDED_AT = 7 * 60 + 30

  def in_the_right_moment?
    moment = Time.now.hour * 60 + Time.now.min
    return false if moment < RIGHT_MOMENT_STARTED_AT
    return false if moment > RIGHT_MOMENT_ENDED_AT
    true
  end

  def perform
    puts "PLAYING"
    rotate_today_if_necessary
    today_playlist.each do |url|
      AudioPlayer.new(url).perform
    end
    puts "=" * 80
  end

  def today_playlist
    content = fetch_index_content
    return [] if content.empty?
    content[today_counter % content.length]
  end

  def today_counter
    unless File.exists?(today_counter_filename)
      index =
        if File.exists?(yesterday_counter_filename)
          index = File.read(yesterday_counter_filename).strip.to_i + 1
        else
          0
        end
      File.write(today_counter_filename, index.to_s)
    end

    File.read(today_counter_filename).to_i
  end

  def index_content
    @index_content ||= fetch_index_content
  end

  def rotate_today_if_necessary
    if File.exists?(today_folder)
      if read_today_from_folder != today
        rotate_today
      end
    else
      create_today_folder
    end
  end

  def rotate_today
    rename_today_to_yesterday
    create_today_folder
  end

  def today
    Time.now.strftime("%Y-%m-%d")
  end

  def date_filename
    File.expand_path("./date", today_folder)
  end

  def today_counter_filename
    File.expand_path("./counter", today_folder)
  end

  def yesterday_counter_filename
    File.expand_path("./counter", yesterday_folder)
  end

  def create_today_folder
    FileUtils.mkdir_p(today_folder)
    File.write(date_filename, today)
  end

  def read_today_from_folder
    File.read(date_filename)
  end

  def today_folder
    File.expand_path("./today", __dir__)
  end

  def yesterday_folder
    File.expand_path("./yesterday", __dir__)
  end

  def rename_today_to_yesterday
    FileUtils.rm_rf(yesterday_folder)
    FileUtils.mv(today_folder, yesterday_folder)
  end

  def fetch_index_content
    download_index_async
    if index_content_cached?
      read_cached_index
    else
      wait_for_index
      read_cached_index
    end
  rescue Timeout::Error
    empty_index
  end

  def empty_index
    []
  end

  def read_cached_index
    CSV.read(index_filename)
  end

  def cached_folder
    File.expand_path("./cached", __dir__).tap do |path|
      FileUtils.mkdir_p(path)
    end
  end

  def index_filename
    File.expand_path("./spreadsheet.csv", cached_folder)
  end

  def randomized_tmp_filename
    File.expand_path("./rnd-#{rand(10000)}.csv", cached_folder)
  end

  INDEX_URL = "https://storage.googleapis.com/passive-english/audio/index.csv?avoidCache=1"

  def index_url
    INDEX_URL
  end

  def download_index
    tmp_filename = randomized_tmp_filename
    puts "Downloading spreadsheet to #{tmp_filename}..."
    cmd = "wget '#{index_url}' -O '#{tmp_filename}'"
    puts "=" * 80
    puts cmd
    puts "=" * 80
    if system(cmd)
      FileUtils.mv(tmp_filename, index_filename)
    else
      puts "Download failed"
    end
  end

  def download_index_async
    Thread.new { download_index }
  end

  def wait_for_index
    Timeout.timeout(10) do
      loop do
        break if index_content_cached?
        sleep 1
      end
    end
  end

  def index_content_cached?
    File.exists?(index_filename)
  end
end

require 'optparse'
options = {}
OptionParser.new do |opt|
  opt.on("-t", '--test') { |o| options[:test] = true }
  opt.on("-r", '--repeat') { |o| options[:repeat] = true }
  opt.on("-m", '--morning') { |o| options[:morning] = true }
  opt.on("-e", '--examine') { |o| options[:examine] = true }
  opt.on("-k", '--kill-all') { |o| options[:kill_all] = true }
end.parse!

if options[:test]
  MasterPlayer.new.perform
elsif options[:repeat]
  MasterPlayer.new.perform_in_blind_loop
elsif options[:morning]
  MasterPlayer.new.perform_in_loop
elsif options[:examine]
  MasterPlayer.new.examine
elsif options[:kill_all]
  MasterPlayer.new.kill_all
end
