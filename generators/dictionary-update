#!/usr/bin/env ruby

require "fileutils"
require "yaml"
require "timeout"
require "csv"
require("byebug") if RUBY_PLATFORM.include?("darwin")
require "shellwords"
require "curl"
require "json"
require "google/cloud/translate/v2"
require "parallel"
require "open-uri"
require "nokogiri"

class Translator
  attr_reader :english

  def initialize(english)
    @english = english
  end

  def vietnamese
    translate_with_cache("vi")
  end

  def chinese
    translate_with_cache("zh-CN")
  end

  def spanish
    translate_with_cache("es")
  end

  def google_translate_endpoint
    api_key = ENV["GOOGLE_TRANSLATE_API_KEY"]
    "https://translation.googleapis.com/language/translate/v2?key=#{api_key}"
  end

  def translate(target_locale)
    puts "TRANSLATING #{english} TO #{target_locale}"
    client = Google::Cloud::Translate::V2.new
    res = client.translate(english, from: "en", to: target_locale)
    res.text
  end

  def translate_with_cache(target_locale)
    unless translate_cached?(target_locale)
      File.write(translate_cache_filename(target_locale), translate(target_locale))
    end
    File.read(translate_cache_filename(target_locale))
  end

  def cached_folder
    File.expand_path("./cache", __dir__).tap do |path|
      FileUtils.mkdir_p(path)
    end
  end

  def translate_cache_filename(target_locale)
    File.expand_path("#{english}-#{target_locale}", cached_folder)
  end

  def translate_cached?(target_locale)
    File.exists?(translate_cache_filename(target_locale))
  end
end

class ExampleGenerator
  attr_reader :word

  def initialize(word)
    @word = word
  end

  def example
    fetch_with_cache
  end

  def fetch
    puts "FETCHING EXAMPLE FOR #{word}"
    response = URI.open(dictionary_url).read
    if response.empty?
      nil
    else
      parsed_page = Nokogiri::HTML(response)
      parsed_page.css(".examp.dexamp").first&.text
    end
  end

  def dictionary_url
    "https://dictionary.cambridge.org/dictionary/english/#{word}"
  end

  def fetch_with_cache
    unless example_cached?
      File.write(example_cache_filename, fetch)
    end
    File.read(example_cache_filename)
  end

  def cached_folder
    File.expand_path("./cache", __dir__).tap do |path|
      FileUtils.mkdir_p(path)
    end
  end

  def example_cache_filename
    File.expand_path("example-#{word}", cached_folder)
  end

  def example_cached?
    File.exists?(example_cache_filename)
  end
end

class DictionaryUpdator
  def dict
    @dict ||= load_dict
  end

  def dict_filename
    File.expand_path("./dict.yaml", __dir__)
  end

  def load_dict
    if File.exists?(dict_filename)
      File.open(dict_filename, "r") { |f| YAML::load f }
    else
      {}
    end
  end

  def top1000_filename
    File.expand_path("./frequencylist.com-top1000.csv", __dir__)
  end

  def top1000_defs
    CSV.read(top1000_filename, headers: true, :col_sep => "\t")
  end

  def perform
    # first use parallel to trigger parallel translation
    # this won't change the result, perhaps due to parallel forking processes
    Parallel.each(top1000_defs.each) do |d|
    # top1000_defs.each do |d|
      perform_on_single_word(d)
    end

    # then translate again to use the result
    top1000_defs.each do |d|
      perform_on_single_word(d)
    end

    File.write(dict_filename, dict.to_yaml)
  end

  def perform_on_single_word(d)
    lemma = d["LEMMA"]
    inflections = d["INFLECTIONS"]
    pos = d["POS"]
    frequency = d["FREQUENCY"].to_i
    dict[lemma] = {
      "english" => lemma,
      "pos" => pos, "frequency" => frequency,
      "inflections" => customized_or_else(lemma, "inflections") { inflections },
      "vietnamese" => customized_or_else(lemma, "vietnamese") { Translator.new(lemma).vietnamese },
      "spanish" => customized_or_else(lemma, "spanish") { Translator.new(lemma).spanish },
      "chinese" => customized_or_else(lemma, "chinese") { Translator.new(lemma).chinese },
      "example_english" => customized_or_else(lemma, "example_english") { ExampleGenerator.new(lemma).example },
    }
  end

  def customized_or_else(lemma, target)
    if customized_dict.dig(lemma, target)
      return customized_dict.dig(lemma, target)
    end
    return yield
  end

  def customized_dict
    @customized_dict ||= load_customized_dict
  end

  def customized_dict_filename
    File.expand_path("./customized-dict.yaml", __dir__)
  end

  def load_customized_dict
    if File.exists?(customized_dict_filename)
      File.open(customized_dict_filename, "r") { |f| YAML::load f }
    else
      {}
    end
  end

end

DictionaryUpdator.new.perform
